Lab 10 - Lab 4 - delegation implementation
package simple.demo2

interface Base {
    fun print()
}
class JSONFormat(val x: Int) : Base {
    override fun print() { println("JSONFormat" + x.toString()) }
}
class XMLFormat(val x: Int) : Base {
    override fun print() { println("XMLFormat" + x.toString())  }
}
class GSONFormat(val x: Int) : Base {
    override fun print() { println("GSONFormat" + x.toString())  }
}

class  Derived(b: Base) : Base by b

fun main() {
   var impl1:Base = JSONFormat(10)
   var impl2:Base = XMLFormat(10)
   var impl3:Base = GSONFormat(10)
   var derived:Derived = Derived(impl3)
   derived.print()
}

---------
Asgn -> write a add method as suspend -> add(10,30) return sum -> delay (random number)
      invoke add method and show sum once  add returns 
---------------
Lab 9 - lab3
package simple.demo2

import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

fun main() {
    println("Hello ")
    var str = "processing...."
    val j1 = GlobalScope.launch {
        println("Just before Delay1")
        delay(2000L)
        str ="Fetch Data from Server"
        println("after delay1")
    }
    GlobalScope.launch {
        println("Rendering logic")
        println("Current Value of data is " + str)
        j1.join()
        println("Value of data after join is " + str)

        println("after delay2")
    }
    println("World !!!")

    readLine()

}

-------------------
Lab8 - Lab2
      package simple.demo2

      import kotlinx.coroutines.GlobalScope
      import kotlinx.coroutines.delay
      import kotlinx.coroutines.launch
      import kotlinx.coroutines.runBlocking

      fun main() {
          println("in main ")
          runBlocking {
            launch {   hellohelp() }
            launch { worldhelp() }
              launch { delay(500L)
                      println("in third direct launch")
              }
          }
          println("after hello and world help")
      }
      suspend fun hellohelp(){
          println("Hello help start ")
          delay(1000L)
          println("Hello help end ")
      }
      suspend fun worldhelp(){
          println("World help start ")
          delay(1000L)
          println("World help end ")
      }

Lab 7 - Demo2 project (Lab1)
      Modify build.gradle (app ) to include
              implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.0'
      Create Lab1
            package simple.demo2

            import kotlinx.coroutines.GlobalScope
            import kotlinx.coroutines.delay
            import kotlinx.coroutines.launch

            fun main() {
                println("Hello ")

                GlobalScope.launch {
                    println("Just before Delay1")
                    delay(1000L)
                    println("after delay1")
                }
                GlobalScope.launch {
                    println("Just before Delay2")
                    delay(1000L)
                    println("after delay2")
                }
                readLine()
                println("World !!!")
            }

      modify current code to print 1 to 1000 in both the launch methods and see execution

-------------------------------------------------------
Lab 6 - JSON Serialization
1. Modify gradle file (Module)->   classpath "org.jetbrains.kotlin:kotlin-serialization:1.6.10"
2. Modify gradle file (app -> 
      apply plugin: "kotlinx-serialization"

      implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.2'


package com.example.app3


import kotlinx.serialization.Serializable
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

@Serializable
data class Name(val fname: String, val lname: String)

fun main() {
    val json = Json.encodeToString(Name("Vaishali", "Tapaswi"))
    println(json)
    val json1 = """{"fname":"Fands", "lname":"Infonet"}"""

    val data = Json.decodeFromString<Name>(json1)
    println(data)
    }


-------------------------
Lab 4 - Operator 
      package simple.demo1

      data class Emp(val empno: Int, val ename: String, var salary:Int)
      operator fun Emp.inc() = Emp(empno, ename, salary+100)
      fun main() {
          var emp= Emp(10,"AA",1000)
          println(emp)
          emp++
          println(emp)
      }

==========
Lab 3 - 
      Write a new extention function for List to Print in reverse order. like list.reverse()
package simple.demo1

fun main() {
    val  s:String ="Vaishali"
    println(s)
    s.aaa("cc")
}

private fun String.aaa(s: String) {
    println("in aaa ")
}


Lab 2 - Delete all the departments with loc = "Hyd"

package simple.demo1
data class Dept(var deptno:Int, var dname:String,var loc:String)
fun main() {
      var list= mutableListOf<Dept>()
      list.add(Dept(10,"HR","Hyd"))
          list.add(Dept(20,"HR","Pnq"))
          list.add(Dept(30,"it","Blr"))
          list.add(Dept(40,"fIN","Hyd"))
          println(list)
          list.replaceAll({d->
              d.loc ="NCR11"
              return@replaceAll d
          })
          println(list)
}


Lab1 - Android Studio -> New project (Nauget) -> Empty/no activity

      fun main() {
          var name:String?  = "aa"
          var nm:String="aaa"
          println(name)
          println(name?.length)

          println(nm?.length)

          name = null

          println(nm?.length)

          println(name)
          var len:Int = name?.length?:0
          println(len)

      }
      
      Class Data for Address where -> Line1, line2 , city and state -> line2 is optional
        write print method to convert "line1, line2, city, state" as string
      Make Other Data class for Person -> pname, address(optional)
      Initialize to print the person details.
      
 //data class User(val name: String, val age: Int)
 
      
