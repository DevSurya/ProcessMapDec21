Lab 5- https://developer.android.com/guide/navigation/navigation-getting-started
---> Customization of links
Lab 4 - Koin In (https://github.com/Vaishali-Tapaswi/ProcessMapDec21/blob/main/koin%20(2).zip)
  -> module -> KoinModule 
    
          val appModule = module {
              single { provideOkHttpClient() }
              single { provideRetrofit(get(), BuildConfig.BASE_URL) }
              single { provideApiService(get()) }
              single { provideNetworkHelper(androidContext()) }

              single<ApiHelper> {
                  return@single ApiHelperImpl(get())
              }
          }

          private fun provideNetworkHelper(context: Context) = NetworkHelper(context)

          private fun provideOkHttpClient() = if (BuildConfig.DEBUG) {
              val loggingInterceptor = HttpLoggingInterceptor()
              loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY)
              OkHttpClient.Builder()
                  .addInterceptor(loggingInterceptor)
                  .build()
          } else OkHttpClient
              .Builder()
              .build()

          private fun provideRetrofit(
              okHttpClient: OkHttpClient,
              BASE_URL: String
          ): Retrofit =
              Retrofit.Builder()
                  .addConverterFactory(MoshiConverterFactory.create())
                  .baseUrl(BASE_URL)
                  .client(okHttpClient)
                  .build()

          private fun provideApiService(retrofit: Retrofit): ApiService =
              retrofit.create(ApiService::class.java)

factory - 

class MainViewModel(
    private val mainRepository: MainRepository,
    private val networkHelper: NetworkHelper
) : ViewModel() {

    private val _users = MutableLiveData<Resource<List<User>>>()
    val users: LiveData<Resource<List<User>>>
        get() = _users

    init {
        fetchUsers()
    }



------------------------
Lab 3 - MVI

https://medium.com/mindorks/the-evolution-of-android-architectures-mvp-mvvm-mvi-f72f67093b81
https://medium.com/@binsdreams/comparison-on-mvp-mvvm-mvi-45886a753d63
Lab2 - UI states

-------------------------
Lab1 - Model-View-ViewModel demo (https://resocoder.com/2018/09/07/mvvm-on-android-crash-course-kotlin-android-architecture-components/)
  Dependencies 
    implementation 'androidx.appcompat:appcompat:1.0.0-rc01'
    implementation "androidx.lifecycle:lifecycle-extensions:2.0.0-rc01"
 

  Prep. 1. Data
           data class Quote(val quoteText: String,
                           val author: String) {
              override fun toString(): String {
                  return "$quoteText - $author"
              }
          }
        2. Data Storage
            DAO
                    class FakeQuoteDao {
                        private val quoteList = mutableListOf<Quote>()
                        private val quotes = MutableLiveData<List<Quote>>()

                        init {
                            quotes.value = quoteList
                        }

                        fun addQuote(quote: Quote) {
                            quoteList.add(quote)
                            quotes.value = quoteList
                        }

                        fun getQuotes() = quotes as LiveData<List<Quote>>
                    }
            Db Configuration
                class FakeDatabase private constructor() {

                  var quoteDao = FakeQuoteDao()
                      private set

                  companion object {
                      @Volatile private var instance: FakeDatabase? = null

                      fun getInstance() =
                              instance ?: synchronized(this) {
                                  instance ?: FakeDatabase().also { instance = it }
                              }
                  }
              }
    3. Repository
      
        class QuoteRepository private constructor(private val quoteDao: FakeQuoteDao){

            fun addQuote(quote: Quote) {
                quoteDao.addQuote(quote)
            }

            fun getQuotes() = quoteDao.getQuotes()

            companion object {
                @Volatile private var instance: QuoteRepository? = null

                fun getInstance(quoteDao: FakeQuoteDao) =
                        instance ?: synchronized(this) {
                            instance ?: QuoteRepository(quoteDao).also { instance = it }
                        }
            }
        }
        
     4. View Model
        ViewModel
          class QuotesViewModel(private val quoteRepository: QuoteRepository)
          : ViewModel() {

          fun getQuotes() = quoteRepository.getQuotes()

          fun addQuote(quote: Quote) = quoteRepository.addQuote(quote)
        }        
        
        ViewModelFactory

          class QuotesViewModelFactory(private val quoteRepository: QuoteRepository)
              : ViewModelProvider.NewInstanceFactory() {

              @Suppress("UNCHECKED_CAST")
              override fun <T : ViewModel?> create(modelClass: Class<T>): T {
                  return QuotesViewModel(quoteRepository) as T
              }
          }
        
     5. Activity  (create two text boxes editText_quote, editText_author , one view(textView_quotes)  and one button(button_add_quote)
      
            class QuotesActivity : AppCompatActivity() {

                override fun onCreate(savedInstanceState: Bundle?) {
                    super.onCreate(savedInstanceState)
                    setContentView(R.layout.activity_quotes)
                    initializeUi()
                }

                private fun initializeUi() {
                    val factory = InjectorUtils.provideQuotesViewModelFactory()
                    val viewModel = ViewModelProviders.of(this, factory)
                            .get(QuotesViewModel::class.java)

                    viewModel.getQuotes().observe(this, Observer { quotes ->
                        val stringBuilder = StringBuilder()
                        println("in getQuotes observe method")
                        quotes.forEach{ quote ->
                            stringBuilder.append("$quote\n\n")
                        }
                        textView_quotes.text = stringBuilder.toString()
                    })

                    button_add_quote.setOnClickListener {
                        val quote = Quote(editText_quote.text.toString(), editText_author.text.toString())
                        viewModel.addQuote(quote)
                        editText_quote.setText("")
                        editText_author.setText("")
                    }
                }
            }
