Lab 6 - demo6 - new project
    Modify gradle file
    Add to plugin
       id 'kotlin-kapt'
       id 'kotlin-android-extensions'
    
    Modify dependencies to include
    
    def room_version = "2.2.6" // check latest version from docs

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation 'android.arch.persistence.room:rxjava2:1.1.1'

    implementation "android.arch.lifecycle:extensions:1.1.0"
    kapt "android.arch.lifecycle:compiler:1.1.0"

write user.kt
    import androidx.room.ColumnInfo
    import androidx.room.Entity
    import androidx.room.PrimaryKey

    @Entity()
    data class User(
        @PrimaryKey
        @ColumnInfo(name = "namecol") val name: String,
        @ColumnInfo(name = "agecol") val age: Int?
    )

write UserDao.kt

    import androidx.room.Dao
    import androidx.room.Delete
    import androidx.room.Insert
    import androidx.room.Query

    @Dao
    interface UserDao {
        @Query("SELECT * FROM user")
        fun getAll(): List<User>


        @Insert
        fun insertAll(vararg users: User)

        @Delete
        fun delete(user: User)
    }
write AppDatabase

    import androidx.room.Database
    import androidx.room.RoomDatabase

    @Database(entities = [User::class], version = 2)
    abstract class AppDatabase : RoomDatabase() {
        abstract fun userDao(): UserDao
    }

Modify mainactivity onCreate method to include 
    val db = Room.databaseBuilder(
            applicationContext,
            AppDatabase::class.java, "database-name"
        ).allowMainThreadQueries().fallbackToDestructiveMigration().build()

        val user = User( "v2",22)

        db.userDao().insertAll(user)
        val users: List<User> = db.userDao().getAll()

        users.forEach{
            println(it)
        }

Test -> run logs -> check database values 

------------
Lab 5 - demo5 
    build.gradle (app)
        
    implementation 'com.squareup.retrofit2:retrofit:2.8.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.8.1'

    modify activity_main.xml to include
         <Button
        android:id="@+id/button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Click "
        tools:layout_editor_absoluteX="158dp"
        tools:layout_editor_absoluteY="465dp"
        tools:ignore="OnClick" />

    Write dataclasses.kt
        data class Todo(var userId: Int, var id:Int, var title: String, var completed:Boolean)
    Write APIInterface.kt
                    package com.example.demo5

                import retrofit2.Call
                import retrofit2.Retrofit
                import retrofit2.converter.gson.GsonConverterFactory
                import retrofit2.http.GET
                import com.google.gson.GsonBuilder


                interface ApiInterface {

                        @GET("/todos/1/")
                        fun getTodo() : Call<Todo>

                        companion object {

                            var BASE_URL = "https://jsonplaceholder.typicode.com/"

                            fun create() : ApiInterface {
                                val gson = GsonBuilder()
                                    .setLenient()
                                    .create()

                                val retrofit = Retrofit.Builder()
                                    .baseUrl(BASE_URL)
                                    .addConverterFactory(GsonConverterFactory.create(gson))
                                    .build()
                                return retrofit.create(ApiInterface::class.java)

                            }
                        }
                    }
    Write MainActivity.kt
    package com.example.demo5

import android.app.Application
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.View
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class MainActivity : AppCompatActivity() {
    var btn: Button? = null
    var view1: TextView? = null
    override fun onCreate(savedInstanceState: Bundle?) {

        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        btn = findViewById<Button>(R.id.button)
        view1 = findViewById<TextView>(R.id.txtview)
        val apiInterface = ApiInterface.create().getTodo()
        btn?.setOnClickListener(object : View.OnClickListener {
            override fun onClick(v: View?) {
                println("in onclick listener....")
                apiInterface.enqueue(object : Callback<Todo> {
                    override fun onResponse(call: Call<Todo>?, response: Response<Todo>?) {
                        println("in onResponse listener")

                        var str: String = response?.body()?.toString() ?: "notfound"
                        view1?.setText(str)
                        Toast.makeText(this@MainActivity, str, Toast.LENGTH_SHORT).show()
                        //recyclerAdapter.setMovieListItems(response.body()!!)
                    }

                    override fun onFailure(call: Call<Todo>?, t: Throwable?) {
                        println("on failuer" + call?.request())
                        println("on Failure" + t?.message)
                        view1?.text = "Failure ...."
                    }
                })
            }
        })
    }
}

Run -> 
    check errors
Modify manifest\androidManifest file to include 
    <uses-permission android:name="android.permission.INTERNET" />

-----------
Lab 4 - client.kt in demo4
package com.example.demo4

import io.ktor.client.*
import io.ktor.client.call.*
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

fun main() {

    val client = HttpClient()
    val url = "http://localhost:3000/dept"

    runBlocking {
        val httpResponse: HttpResponse = client.get(url)
        val stringBody: String = httpResponse.receive()
        println("Return of dept " + stringBody)
    }
    runBlocking {
        val d = Dept(333,"IT","BLR")
        val json = Json.encodeToString(d)

        val message = client.post<HttpResponse> (url){
            contentType(ContentType.Application.Json)
            body = json
        }
        println("post returns " + message.status)
    }
    runBlocking {
        val httpResponse: HttpResponse = client.get(url + "/10")
        val stringBody: String = httpResponse.receive()
        println("return of dept/10 " + stringBody)
    }

    client.close()
}


Lab 3 - https://ktor.io/docs/creating-http-apis.html#project-setup (new project - demo4)
modify build.gradle.app 
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.1'
    implementation "io.ktor:ktor-server-core:1.6.7"
    implementation "io.ktor:ktor-server-netty:1.6.7"
    implementation "io.ktor:ktor-serialization:1.6.7"
    implementation "io.ktor:ktor-client-core:1.6.7"
    implementation "io.ktor:ktor-client-cio:1.6.7"

    implementation "ch.qos.logback:logback-classic:1.2.5"


    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
   
  Create Application.kt
  import io.ktor.application.*
import io.ktor.features.*
import io.ktor.http.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import io.ktor.serialization.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*

val deptstorage = mutableListOf<Dept>()
fun main() {
    embeddedServer(Netty, port = 3000, module = Application::module).start(wait = true)
}

fun Application.module() {
        println("...................Application.module")

        install(ContentNegotiation) {
            json()
        }

        routing {
            get("/dept") {
                if (deptstorage.isNotEmpty()) {
                    call.respond(deptstorage)
                } else {
                    call.respondText("No departments found", status = HttpStatusCode.NotFound)
                    val dept = Dept(10, "HR", "Hyd")
                    deptstorage.add(dept)
                }
            }
            get("/dept/{id}") {
                val id = call.parameters["id"] ?: return@get call.respondText(
                    "Missing or malformed id",
                    status = HttpStatusCode.BadRequest
                )
                val dept =
                    deptstorage.find { it.deptno == id.toInt() } ?: return@get call.respondText(
                        "No department with deptno $id",
                        status = HttpStatusCode.NotFound
                    )
                call.respond(dept)
            }
            post("/dept") {
                println(call.request)
                val dept = call.receive<Dept>()
                deptstorage.add(dept)
                call.respondText("Customer stored correctly", status = HttpStatusCode.Created)
            }


        }
    }

Create DataClasses.kt
package com.example.demo4
import kotlinx.serialization.Serializable
@Serializable
data class Dept(val deptno: Int, val dname:String, val loc: String)

Run -> Chrome / Postman


    
--------------

Lab 2 - Create lib
    new module -> java or kotlin library -> 
      class MyClass {

        fun sqr(no : Int):Int {
            println("mylib-MyClass-SQR invoked ")
            return no*no;
        }

        fun cube(no : Int):Int {
            println("mylib-MyClass-SQR invoked ")
            return no*no*no;
        }
    }
    
    Modify demo3 -> module dependencies -> add module or 
         implementation project(path: ':mylib')
    Write lab2.kt
     import com.example.mylib.MyClass

    fun main() {
        val myclass = MyClass()
        println("SQR of 10 is " + myclass.sqr(10))
        println("Cube of 10 is " + myclass.cube(10))
    }


Lab 1 - Reflection (demo3 project)
  build.gradle(app) to include
          implementation 'org.jetbrains.kotlin:kotlin-reflect:1.6.0'

  Write Lab1.kt
      package com.example.demo3

      class Maths {
          fun sqr(no : Int):Int {
              return no*no;
          }
      }

      fun main() {
          val c = Maths::class
          val maths = Maths()
          println("List of Constructors ...")
          c.constructors.forEach{ println(it)}
          println("List of Members ...")
          c.members.forEach{ println(it)}
          println("SQR Function")
          val fnsqr =  c.members.filter { it.name=="sqr" }.first()
          println(fnsqr)
          println(fnsqr.call(maths, 100))
      }
Replace line number 15 to dynamically create object
