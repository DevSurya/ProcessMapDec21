Lab 4 - client.kt in demo4
package com.example.demo4

import io.ktor.client.*
import io.ktor.client.call.*
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

fun main() {

    val client = HttpClient()
    val url = "http://localhost:3000/dept"

    runBlocking {
        val httpResponse: HttpResponse = client.get(url)
        val stringBody: String = httpResponse.receive()
        println("Return of dept " + stringBody)
    }
    runBlocking {
        val d = Dept(333,"IT","BLR")
        val json = Json.encodeToString(d)

        val message = client.post<HttpResponse> (url){
            contentType(ContentType.Application.Json)
            body = json
        }
        println("post returns " + message.status)
    }
    runBlocking {
        val httpResponse: HttpResponse = client.get(url + "/10")
        val stringBody: String = httpResponse.receive()
        println("return of dept/10 " + stringBody)
    }

    client.close()
}


Lab 3 - https://ktor.io/docs/creating-http-apis.html#project-setup (new project - demo4)
modify build.gradle.app 
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.1'
    implementation "io.ktor:ktor-server-core:1.6.7"
    implementation "io.ktor:ktor-server-netty:1.6.7"
    implementation "io.ktor:ktor-serialization:1.6.7"
    implementation "io.ktor:ktor-client-core:1.6.7"
    implementation "io.ktor:ktor-client-cio:1.6.7"

    implementation "ch.qos.logback:logback-classic:1.2.5"


    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
   
  Create Application.kt
  import io.ktor.application.*
import io.ktor.features.*
import io.ktor.http.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import io.ktor.serialization.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*

val deptstorage = mutableListOf<Dept>()
fun main() {
    embeddedServer(Netty, port = 3000, module = Application::module).start(wait = true)
}

fun Application.module() {
        println("...................Application.module")

        install(ContentNegotiation) {
            json()
        }

        routing {
            get("/dept") {
                if (deptstorage.isNotEmpty()) {
                    call.respond(deptstorage)
                } else {
                    call.respondText("No departments found", status = HttpStatusCode.NotFound)
                    val dept = Dept(10, "HR", "Hyd")
                    deptstorage.add(dept)
                }
            }
            get("/dept/{id}") {
                val id = call.parameters["id"] ?: return@get call.respondText(
                    "Missing or malformed id",
                    status = HttpStatusCode.BadRequest
                )
                val dept =
                    deptstorage.find { it.deptno == id.toInt() } ?: return@get call.respondText(
                        "No department with deptno $id",
                        status = HttpStatusCode.NotFound
                    )
                call.respond(dept)
            }
            post("/dept") {
                println(call.request)
                val dept = call.receive<Dept>()
                deptstorage.add(dept)
                call.respondText("Customer stored correctly", status = HttpStatusCode.Created)
            }


        }
    }

Create DataClasses.kt
package com.example.demo4
import kotlinx.serialization.Serializable
@Serializable
data class Dept(val deptno: Int, val dname:String, val loc: String)

Run -> Chrome / Postman


    
--------------

Lab 2 - Create lib
    new module -> java or kotlin library -> 
      class MyClass {

        fun sqr(no : Int):Int {
            println("mylib-MyClass-SQR invoked ")
            return no*no;
        }

        fun cube(no : Int):Int {
            println("mylib-MyClass-SQR invoked ")
            return no*no*no;
        }
    }
    
    Modify demo3 -> module dependencies -> add module or 
         implementation project(path: ':mylib')
    Write lab2.kt
     import com.example.mylib.MyClass

    fun main() {
        val myclass = MyClass()
        println("SQR of 10 is " + myclass.sqr(10))
        println("Cube of 10 is " + myclass.cube(10))
    }


Lab 1 - Reflection (demo3 project)
  build.gradle(app) to include
          implementation 'org.jetbrains.kotlin:kotlin-reflect:1.6.0'

  Write Lab1.kt
      package com.example.demo3

      class Maths {
          fun sqr(no : Int):Int {
              return no*no;
          }
      }

      fun main() {
          val c = Maths::class
          val maths = Maths()
          println("List of Constructors ...")
          c.constructors.forEach{ println(it)}
          println("List of Members ...")
          c.members.forEach{ println(it)}
          println("SQR Function")
          val fnsqr =  c.members.filter { it.name=="sqr" }.first()
          println(fnsqr)
          println(fnsqr.call(maths, 100))
      }
Replace line number 15 to dynamically create object
